// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarzService_SyncUsers_FullMethodName          = "/api.MarzService/SyncUsers"
	MarzService_RepopulateUsers_FullMethodName    = "/api.MarzService/RepopulateUsers"
	MarzService_FetchBackends_FullMethodName      = "/api.MarzService/FetchBackends"
	MarzService_FetchUsersStats_FullMethodName    = "/api.MarzService/FetchUsersStats"
	MarzService_FetchBackendConfig_FullMethodName = "/api.MarzService/FetchBackendConfig"
	MarzService_RestartBackend_FullMethodName     = "/api.MarzService/RestartBackend"
	MarzService_StreamBackendLogs_FullMethodName  = "/api.MarzService/StreamBackendLogs"
	MarzService_GetBackendStats_FullMethodName    = "/api.MarzService/GetBackendStats"
)

// MarzServiceClient is the client API for MarzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarzServiceClient interface {
	SyncUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UserData, Empty], error)
	RepopulateUsers(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*Empty, error)
	FetchBackends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BackendsResponse, error)
	FetchUsersStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersStats, error)
	FetchBackendConfig(ctx context.Context, in *Backend, opts ...grpc.CallOption) (*BackendConfig, error)
	RestartBackend(ctx context.Context, in *RestartBackendRequest, opts ...grpc.CallOption) (*Empty, error)
	StreamBackendLogs(ctx context.Context, in *BackendLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error)
	GetBackendStats(ctx context.Context, in *Backend, opts ...grpc.CallOption) (*BackendStats, error)
}

type marzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarzServiceClient(cc grpc.ClientConnInterface) MarzServiceClient {
	return &marzServiceClient{cc}
}

func (c *marzServiceClient) SyncUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UserData, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarzService_ServiceDesc.Streams[0], MarzService_SyncUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserData, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzService_SyncUsersClient = grpc.ClientStreamingClient[UserData, Empty]

func (c *marzServiceClient) RepopulateUsers(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MarzService_RepopulateUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marzServiceClient) FetchBackends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BackendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendsResponse)
	err := c.cc.Invoke(ctx, MarzService_FetchBackends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marzServiceClient) FetchUsersStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersStats)
	err := c.cc.Invoke(ctx, MarzService_FetchUsersStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marzServiceClient) FetchBackendConfig(ctx context.Context, in *Backend, opts ...grpc.CallOption) (*BackendConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendConfig)
	err := c.cc.Invoke(ctx, MarzService_FetchBackendConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marzServiceClient) RestartBackend(ctx context.Context, in *RestartBackendRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MarzService_RestartBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marzServiceClient) StreamBackendLogs(ctx context.Context, in *BackendLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarzService_ServiceDesc.Streams[1], MarzService_StreamBackendLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BackendLogsRequest, LogLine]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzService_StreamBackendLogsClient = grpc.ServerStreamingClient[LogLine]

func (c *marzServiceClient) GetBackendStats(ctx context.Context, in *Backend, opts ...grpc.CallOption) (*BackendStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendStats)
	err := c.cc.Invoke(ctx, MarzService_GetBackendStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarzServiceServer is the server API for MarzService service.
// All implementations must embed UnimplementedMarzServiceServer
// for forward compatibility.
type MarzServiceServer interface {
	SyncUsers(grpc.ClientStreamingServer[UserData, Empty]) error
	RepopulateUsers(context.Context, *UsersData) (*Empty, error)
	FetchBackends(context.Context, *Empty) (*BackendsResponse, error)
	FetchUsersStats(context.Context, *Empty) (*UsersStats, error)
	FetchBackendConfig(context.Context, *Backend) (*BackendConfig, error)
	RestartBackend(context.Context, *RestartBackendRequest) (*Empty, error)
	StreamBackendLogs(*BackendLogsRequest, grpc.ServerStreamingServer[LogLine]) error
	GetBackendStats(context.Context, *Backend) (*BackendStats, error)
	mustEmbedUnimplementedMarzServiceServer()
}

// UnimplementedMarzServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarzServiceServer struct{}

func (UnimplementedMarzServiceServer) SyncUsers(grpc.ClientStreamingServer[UserData, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SyncUsers not implemented")
}
func (UnimplementedMarzServiceServer) RepopulateUsers(context.Context, *UsersData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepopulateUsers not implemented")
}
func (UnimplementedMarzServiceServer) FetchBackends(context.Context, *Empty) (*BackendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBackends not implemented")
}
func (UnimplementedMarzServiceServer) FetchUsersStats(context.Context, *Empty) (*UsersStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUsersStats not implemented")
}
func (UnimplementedMarzServiceServer) FetchBackendConfig(context.Context, *Backend) (*BackendConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBackendConfig not implemented")
}
func (UnimplementedMarzServiceServer) RestartBackend(context.Context, *RestartBackendRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartBackend not implemented")
}
func (UnimplementedMarzServiceServer) StreamBackendLogs(*BackendLogsRequest, grpc.ServerStreamingServer[LogLine]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBackendLogs not implemented")
}
func (UnimplementedMarzServiceServer) GetBackendStats(context.Context, *Backend) (*BackendStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendStats not implemented")
}
func (UnimplementedMarzServiceServer) mustEmbedUnimplementedMarzServiceServer() {}
func (UnimplementedMarzServiceServer) testEmbeddedByValue()                     {}

// UnsafeMarzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarzServiceServer will
// result in compilation errors.
type UnsafeMarzServiceServer interface {
	mustEmbedUnimplementedMarzServiceServer()
}

func RegisterMarzServiceServer(s grpc.ServiceRegistrar, srv MarzServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarzServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarzService_ServiceDesc, srv)
}

func _MarzService_SyncUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarzServiceServer).SyncUsers(&grpc.GenericServerStream[UserData, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzService_SyncUsersServer = grpc.ClientStreamingServer[UserData, Empty]

func _MarzService_RepopulateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzServiceServer).RepopulateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzService_RepopulateUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzServiceServer).RepopulateUsers(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarzService_FetchBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzServiceServer).FetchBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzService_FetchBackends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzServiceServer).FetchBackends(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarzService_FetchUsersStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzServiceServer).FetchUsersStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzService_FetchUsersStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzServiceServer).FetchUsersStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarzService_FetchBackendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzServiceServer).FetchBackendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzService_FetchBackendConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzServiceServer).FetchBackendConfig(ctx, req.(*Backend))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarzService_RestartBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzServiceServer).RestartBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzService_RestartBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzServiceServer).RestartBackend(ctx, req.(*RestartBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarzService_StreamBackendLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackendLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarzServiceServer).StreamBackendLogs(m, &grpc.GenericServerStream[BackendLogsRequest, LogLine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzService_StreamBackendLogsServer = grpc.ServerStreamingServer[LogLine]

func _MarzService_GetBackendStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzServiceServer).GetBackendStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzService_GetBackendStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzServiceServer).GetBackendStats(ctx, req.(*Backend))
	}
	return interceptor(ctx, in, info, handler)
}

// MarzService_ServiceDesc is the grpc.ServiceDesc for MarzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MarzService",
	HandlerType: (*MarzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepopulateUsers",
			Handler:    _MarzService_RepopulateUsers_Handler,
		},
		{
			MethodName: "FetchBackends",
			Handler:    _MarzService_FetchBackends_Handler,
		},
		{
			MethodName: "FetchUsersStats",
			Handler:    _MarzService_FetchUsersStats_Handler,
		},
		{
			MethodName: "FetchBackendConfig",
			Handler:    _MarzService_FetchBackendConfig_Handler,
		},
		{
			MethodName: "RestartBackend",
			Handler:    _MarzService_RestartBackend_Handler,
		},
		{
			MethodName: "GetBackendStats",
			Handler:    _MarzService_GetBackendStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncUsers",
			Handler:       _MarzService_SyncUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamBackendLogs",
			Handler:       _MarzService_StreamBackendLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
